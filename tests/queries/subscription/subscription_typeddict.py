# @generated AUTOGENERATED file. Do not Change!
# flake8: noqa
# fmt: off
# isort: skip_file

import typing
from gql import gql, Client


AllHuman__allHuman = typing.TypedDict("AllHuman__allHuman", {"id": str, "name": str})


AllHumanResponse = typing.TypedDict("AllHumanResponse", {"allHuman": AllHuman__allHuman})


_AllHumanInput__required = typing.TypedDict("_AllHumanInput__required", {})
_AllHumanInput__not_required = typing.TypedDict("_AllHumanInput__not_required", {}, total=False)


class _AllHumanInput(_AllHumanInput__required, _AllHumanInput__not_required):
    pass


class AllHuman:
    Response = AllHumanResponse
    Input = _AllHumanInput
    _query = gql('''
        subscription AllHuman {
          allHuman {
            id name
          }
        }
    ''')
    @classmethod
    def subscribe(cls, client: Client, variable_values: _AllHumanInput = {}) -> typing.Iterable[AllHumanResponse]:
        for r in client.subscribe(cls._query, variable_values=variable_values):
            yield r  # type: ignore
    @classmethod
    async def subscribe_async(cls, client: Client, variable_values: _AllHumanInput = {}) -> typing.AsyncIterable[AllHumanResponse]:
        async for r in client.subscribe_async(cls._query, variable_values=variable_values):
            yield r  # type: ignore
