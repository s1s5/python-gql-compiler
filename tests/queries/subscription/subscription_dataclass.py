# @generated AUTOGENERATED file. Do not Change!
# flake8: noqa
# fmt: off
# isort: skip_file

import typing
import copy
from dataclasses import dataclass
from gql import gql, Client


def rewrite_typename(value: typing.Any):
    if isinstance(value, dict) and '__typename' in value:
        value = copy.copy(value)
        value['_typename'] = value.pop('__typename')
    return value



@dataclass
class AllHuman__allHuman:
    id: str
    name: str


@dataclass
class AllHumanResponse:
    allHuman: AllHuman__allHuman
    def __init__(self, allHuman):
        self.allHuman = AllHuman__allHuman(**rewrite_typename(allHuman))


_AllHumanInput__required = typing.TypedDict("_AllHumanInput__required", {})
_AllHumanInput__not_required = typing.TypedDict("_AllHumanInput__not_required", {}, total=False)


class _AllHumanInput(_AllHumanInput__required, _AllHumanInput__not_required):
    pass


class AllHuman:
    Response = AllHumanResponse
    Input = _AllHumanInput
    _query = gql('''
        subscription AllHuman {
          allHuman {
            id name
          }
        }
    ''')
    @classmethod
    def subscribe(cls, client: Client, variable_values: _AllHumanInput = {}) -> typing.Iterable[AllHumanResponse]:
        for r in client.subscribe(cls._query, variable_values=variable_values):
            yield cls.Response(**rewrite_typename(r))  # type: ignore
    @classmethod
    async def subscribe_async(cls, client: Client, variable_values: _AllHumanInput = {}) -> typing.AsyncIterable[AllHumanResponse]:
        async for r in client.subscribe_async(cls._query, variable_values=variable_values):
            yield cls.Response(**rewrite_typename(r))  # type: ignore
