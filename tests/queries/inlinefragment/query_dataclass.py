# @generated AUTOGENERATED file. Do not Change!
# flake8: noqa
# fmt: off
# isort: skip_file

import typing
import copy
from dataclasses import dataclass
from gql import gql, Client


def rewrite_typename(value: typing.Any):
    if isinstance(value, dict) and '__typename' in value:
        value = copy.copy(value)
        value['_typename'] = value.pop('__typename')
    return value

Episode = typing.Literal["NEWHOPE", "EMPIRE", "JEDI"]


@dataclass
class GetInlineFragment__hero__Droid:
    id: str
    name: str
    primaryFunction: str
    _typename: typing.Literal["Droid"]


@dataclass
class GetInlineFragment__hero__Human:
    id: str
    name: str
    totalCredits: int
    _typename: typing.Literal["Human"]


@dataclass
class GetInlineFragment__hero:
    id: str
    name: str
    _typename: typing.Literal["Character"]


@dataclass
class GetInlineFragmentResponse:
    hero: GetInlineFragment__hero
    def __init__(self, hero):
        __hero_map = {
            "Human": GetInlineFragment__hero__Human,
            "Droid": GetInlineFragment__hero__Droid,
        }
        self.hero = __hero_map.get(hero["__typename"], GetInlineFragment__hero)(**rewrite_typename(hero))


_GetInlineFragmentInput__required = typing.TypedDict("_GetInlineFragmentInput__required", {"e": Episode})
_GetInlineFragmentInput__not_required = typing.TypedDict("_GetInlineFragmentInput__not_required", {}, total=False)


class _GetInlineFragmentInput(_GetInlineFragmentInput__required, _GetInlineFragmentInput__not_required):
    pass


class GetInlineFragment:
    Response: typing.TypeAlias = GetInlineFragmentResponse
    Input: typing.TypeAlias = _GetInlineFragmentInput
    _query = gql('''
        query GetInlineFragment($e: Episode!) {
          hero(episode: $e) {
            __typename id name
            ... on Human { totalCredits }
            ... on Droid { primaryFunction }
          }
        }
    ''')
    @classmethod
    def execute(cls, client: Client, variable_values: _GetInlineFragmentInput) -> GetInlineFragmentResponse:
        return cls.Response(**rewrite_typename(client.execute(  # type: ignore
            cls._query, variable_values=variable_values
        )))
    @classmethod
    async def execute_async(cls, client: Client, variable_values: _GetInlineFragmentInput) -> typing.Awaitable[GetInlineFragmentResponse]:
        return cls.Response(**rewrite_typename(await client.execute_async(  # type: ignore
            cls._query, variable_values=variable_values
        )))
