# @generated AUTOGENERATED file. Do not Change!
# flake8: noqa
# fmt: off
# isort: skip_file

import typing
import copy
from dataclasses import dataclass
from gql import gql, Client


def rewrite_typename(value: typing.Any):
    if isinstance(value, dict) and '__typename' in value:
        value = copy.copy(value)
        value['_typename'] = value.pop('__typename')
    return value



@dataclass
class GetUnion__search__Starship:
    name: str
    _typename: typing.Literal["Starship"]


@dataclass
class GetUnion__search__Droid__friends:
    name: str


@dataclass
class GetUnion__search__Droid:
    friends: typing.List[typing.Optional[GetUnion__search__Droid__friends]]
    _typename: typing.Literal["Droid"]
    def __init__(self, friends, _typename):
        self.friends = [GetUnion__search__Droid__friends(**rewrite_typename(friends__iter)) if friends__iter else None for friends__iter in friends]
        self._typename = _typename


@dataclass
class GetUnion__search__Human:
    totalCredits: int
    _typename: typing.Literal["Human"]


@dataclass
class GetUnion__search:
    _typename: typing.Literal["SearchResult"]


@dataclass
class GetUnionResponse:
    search: typing.List[GetUnion__search]
    def __init__(self, search):
        __search_map = {
            "Human": GetUnion__search__Human,
            "Droid": GetUnion__search__Droid,
            "Starship": GetUnion__search__Starship,
        }
        self.search = [__search_map.get(search__iter["__typename"], GetUnion__search)(**rewrite_typename(search__iter)) for search__iter in search]


_GetUnionInput__required = typing.TypedDict("_GetUnionInput__required", {"text": str})
_GetUnionInput__not_required = typing.TypedDict("_GetUnionInput__not_required", {}, total=False)


class _GetUnionInput(_GetUnionInput__required, _GetUnionInput__not_required):
    pass


class GetUnion:
    Response: typing.TypeAlias = GetUnionResponse
    Input: typing.TypeAlias = _GetUnionInput
    _query = gql('''
        query GetUnion($text: String!) {
          search(text: $text) {
            __typename
            ... on Human { totalCredits }
            ... on Droid { friends { name } }
            ... on Starship { name }
          }
        }
    ''')
    @classmethod
    def execute(cls, client: Client, variable_values: _GetUnionInput) -> GetUnionResponse:
        return cls.Response(**rewrite_typename(client.execute(  # type: ignore
            cls._query, variable_values=variable_values
        )))
    @classmethod
    async def execute_async(cls, client: Client, variable_values: _GetUnionInput) -> GetUnionResponse:
        return cls.Response(**rewrite_typename(await client.execute_async(  # type: ignore
            cls._query, variable_values=variable_values
        )))
