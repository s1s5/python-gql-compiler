# @generated AUTOGENERATED file. Do not Change!
# flake8: noqa
# fmt: off
# isort: skip_file

import typing
from gql import gql, Client


GetUnion__search__Starship = typing.TypedDict("GetUnion__search__Starship", {"__typename": typing.Literal["Starship"], "name": str})


GetUnion__search__Droid__friends = typing.TypedDict("GetUnion__search__Droid__friends", {"name": str})


GetUnion__search__Droid = typing.TypedDict("GetUnion__search__Droid", {"__typename": typing.Literal["Droid"], "friends": typing.List[typing.Optional[GetUnion__search__Droid__friends]]})


GetUnion__search__Human = typing.TypedDict("GetUnion__search__Human", {"__typename": typing.Literal["Human"], "totalCredits": int})


__GetUnion__search = typing.TypedDict("__GetUnion__search", {"__typename": typing.Literal["SearchResult"]})
GetUnion__search = typing.Union[__GetUnion__search, GetUnion__search__Human, GetUnion__search__Droid, GetUnion__search__Starship]


GetUnionResponse = typing.TypedDict("GetUnionResponse", {"search": typing.List[GetUnion__search]})


_GetUnionInput__required = typing.TypedDict("_GetUnionInput__required", {"text": str})
_GetUnionInput__not_required = typing.TypedDict("_GetUnionInput__not_required", {}, total=False)


class _GetUnionInput(_GetUnionInput__required, _GetUnionInput__not_required):
    pass


class GetUnion:
    Response: typing.TypeAlias = GetUnionResponse
    Input: typing.TypeAlias = _GetUnionInput
    _query = gql('''
        query GetUnion($text: String!) {
          search(text: $text) {
            __typename
            ... on Human { totalCredits }
            ... on Droid { friends { name } }
            ... on Starship { name }
          }
        }
    ''')
    @classmethod
    def execute(cls, client: Client, variable_values: _GetUnionInput) -> GetUnionResponse:
        return client.execute(  # type: ignore
            cls._query, variable_values=variable_values
        )
    @classmethod
    def execute_async(cls, client: Client, variable_values: _GetUnionInput) -> typing.Awaitable[GetUnionResponse]:
        return client.execute_async(  # type: ignore
            cls._query, variable_values=variable_values
        )
