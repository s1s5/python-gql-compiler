# @generated AUTOGENERATED file. Do not Change!
# flake8: noqa
# fmt: off
# isort: skip_file

import typing
import copy
from dataclasses import dataclass
from gql import gql, Client


def rewrite_typename(value: typing.Any):
    if isinstance(value, dict) and '__typename' in value:
        value = copy.copy(value)
        value['_typename'] = value.pop('__typename')
    return value



AddStarshipInput__required = typing.TypedDict("AddStarshipInput__required", {"name": str})
AddStarshipInput__not_required = typing.TypedDict("AddStarshipInput__not_required", {}, total=False)


class AddStarshipInput(AddStarshipInput__required, AddStarshipInput__not_required):
    pass


@dataclass
class AddStarship__addStarship:
    id: str
    name: str


@dataclass
class AddStarshipResponse:
    addStarship: AddStarship__addStarship
    def __init__(self, addStarship):
        self.addStarship = AddStarship__addStarship(**rewrite_typename(addStarship))


_AddStarshipInput__required = typing.TypedDict("_AddStarshipInput__required", {"input": AddStarshipInput})
_AddStarshipInput__not_required = typing.TypedDict("_AddStarshipInput__not_required", {}, total=False)


class _AddStarshipInput(_AddStarshipInput__required, _AddStarshipInput__not_required):
    pass


class AddStarship:
    Response: typing.TypeAlias = AddStarshipResponse
    Input: typing.TypeAlias = _AddStarshipInput
    _query = gql('''
        mutation AddStarship($input: AddStarshipInput!) {
          addStarship(input: $input) {
            id name
          }
        }
    ''')
    @classmethod
    def execute(cls, client: Client, variable_values: _AddStarshipInput) -> AddStarshipResponse:
        return cls.Response(**rewrite_typename(client.execute(  # type: ignore
            cls._query, variable_values=variable_values
        )))
    @classmethod
    async def execute_async(cls, client: Client, variable_values: _AddStarshipInput) -> typing.Awaitable[AddStarshipResponse]:
        return cls.Response(**rewrite_typename(await client.execute_async(  # type: ignore
            cls._query, variable_values=variable_values
        )))
