# @generated AUTOGENERATED file. Do not Change!
# flake8: noqa
# fmt: off
# isort: skip_file

import typing
import copy
from dataclasses import dataclass
from gql import gql, Client


def rewrite_typename(value: typing.Any):
    if isinstance(value, dict) and '__typename' in value:
        value = copy.copy(value)
        value['_typename'] = value.pop('__typename')
    return value

Episode = typing.Literal["NEWHOPE", "EMPIRE", "JEDI"]


@dataclass
class GetRecursive__hero__Droid__friends__Droid__friends:
    name: str


@dataclass
class GetRecursive__hero__Droid__friends__Droid:
    id: str
    name: str
    friends: typing.List[typing.Optional[GetRecursive__hero__Droid__friends__Droid__friends]]
    _typename: typing.Literal["Droid"]
    def __init__(self, id, name, friends, _typename):
        self.id = id
        self.name = name
        self.friends = [GetRecursive__hero__Droid__friends__Droid__friends(**rewrite_typename(friends__iter)) if friends__iter else None for friends__iter in friends]
        self._typename = _typename


@dataclass
class GetRecursive__hero__Droid__friends__Human__starships:
    name: str


@dataclass
class GetRecursive__hero__Droid__friends__Human:
    id: str
    name: str
    starships: typing.List[typing.Optional[GetRecursive__hero__Droid__friends__Human__starships]]
    _typename: typing.Literal["Human"]
    def __init__(self, id, name, starships, _typename):
        self.id = id
        self.name = name
        self.starships = [GetRecursive__hero__Droid__friends__Human__starships(**rewrite_typename(starships__iter)) if starships__iter else None for starships__iter in starships]
        self._typename = _typename


@dataclass
class GetRecursive__hero__Droid__friends:
    id: str
    _typename: typing.Literal["Character"]


@dataclass
class GetRecursive__hero__Droid:
    name: str
    primaryFunction: str
    friends: typing.List[typing.Optional[GetRecursive__hero__Droid__friends]]
    _typename: typing.Literal["Droid"]
    def __init__(self, name, primaryFunction, friends, _typename):
        self.name = name
        self.primaryFunction = primaryFunction
        __friends_map = {
            "Human": GetRecursive__hero__Droid__friends__Human,
            "Droid": GetRecursive__hero__Droid__friends__Droid,
        }
        self.friends = [__friends_map.get(friends__iter["__typename"], GetRecursive__hero__Droid__friends)(**rewrite_typename(friends__iter)) if friends__iter else None for friends__iter in friends]
        self._typename = _typename


@dataclass
class GetRecursive__hero__Human__friends__Droid:
    id: str
    name: str
    _typename: typing.Literal["Droid"]


@dataclass
class GetRecursive__hero__Human__friends__Human:
    name: str
    _typename: typing.Literal["Human"]


@dataclass
class GetRecursive__hero__Human__friends:
    _typename: typing.Literal["Character"]


@dataclass
class GetRecursive__hero__Human:
    name: str
    friends: typing.List[typing.Optional[GetRecursive__hero__Human__friends]]
    _typename: typing.Literal["Human"]
    def __init__(self, name, friends, _typename):
        self.name = name
        __friends_map = {
            "Human": GetRecursive__hero__Human__friends__Human,
            "Droid": GetRecursive__hero__Human__friends__Droid,
        }
        self.friends = [__friends_map.get(friends__iter["__typename"], GetRecursive__hero__Human__friends)(**rewrite_typename(friends__iter)) if friends__iter else None for friends__iter in friends]
        self._typename = _typename


@dataclass
class GetRecursive__hero:
    name: str
    _typename: typing.Literal["Character"]


@dataclass
class GetRecursiveResponse:
    hero: GetRecursive__hero
    def __init__(self, hero):
        __hero_map = {
            "Human": GetRecursive__hero__Human,
            "Droid": GetRecursive__hero__Droid,
        }
        self.hero = __hero_map.get(hero["__typename"], GetRecursive__hero)(**rewrite_typename(hero))


_GetRecursiveInput__required = typing.TypedDict("_GetRecursiveInput__required", {"episode": Episode})
_GetRecursiveInput__not_required = typing.TypedDict("_GetRecursiveInput__not_required", {}, total=False)


class _GetRecursiveInput(_GetRecursiveInput__required, _GetRecursiveInput__not_required):
    pass


class GetRecursive:
    Response: typing.TypeAlias = GetRecursiveResponse
    Input: typing.TypeAlias = _GetRecursiveInput
    _query = gql('''
        query GetRecursive($episode: Episode!) {
          hero(episode: $episode) {
            __typename
            name
            ... on Human {
              friends {
                __typename
                ... on Human { name }
                ... on Droid { id name }
              }
            }
            ... on Droid {
              primaryFunction
              friends {
                __typename
                id
                ... on Human {
                  name
                  starships { name }
                }
                ... on Droid {
                  name
                  friends { name }
                }
              }
            }
          }
        }
    ''')
    @classmethod
    def execute(cls, client: Client, variable_values: _GetRecursiveInput) -> GetRecursiveResponse:
        return cls.Response(**rewrite_typename(client.execute(  # type: ignore
            cls._query, variable_values=variable_values
        )))
    @classmethod
    async def execute_async(cls, client: Client, variable_values: _GetRecursiveInput) -> GetRecursiveResponse:
        return cls.Response(**rewrite_typename(await client.execute_async(  # type: ignore
            cls._query, variable_values=variable_values
        )))
