# @generated AUTOGENERATED file. Do not Change!

import typing
from gql import gql, Client
import datetime


GetScalarResponse = typing.TypedDict("GetScalarResponse", {"hello": str})


_GetScalarInput__required = typing.TypedDict("_GetScalarInput__required", {})
_GetScalarInput__not_required = typing.TypedDict("_GetScalarInput__not_required", {}, total=False)


class _GetScalarInput(_GetScalarInput__required, _GetScalarInput__not_required):
    pass


class GetScalar:
    _query = gql('''
        query GetScalar {
          hello
        }
    ''')
    @classmethod
    def execute(cls, client: Client, variable_values: _GetScalarInput = {}) -> GetScalarResponse:
        return client.execute(  # type: ignore
            cls._query, variable_values=variable_values
        )
    @classmethod
    def execute_async(cls, client: Client, variable_values: _GetScalarInput = {}) -> typing.Awaitable[GetScalarResponse]:
        return client.execute_async(  # type: ignore
            cls._query, variable_values=variable_values
        )
Episode = typing.Literal["NEWHOPE", "EMPIRE", "JEDI"]


GetObject__droid = typing.TypedDict("GetObject__droid", {"id": str, "name": str, "appearsIn": typing.List[Episode], "primaryFunction": str})


GetObjectResponse = typing.TypedDict("GetObjectResponse", {"droid": GetObject__droid})


_GetObjectInput__required = typing.TypedDict("_GetObjectInput__required", {"id": str})
_GetObjectInput__not_required = typing.TypedDict("_GetObjectInput__not_required", {}, total=False)


class _GetObjectInput(_GetObjectInput__required, _GetObjectInput__not_required):
    pass


class GetObject:
    _query = gql('''
        query GetObject($id: ID!) {
          droid(id: $id) {
            id name appearsIn primaryFunction
          }
        }
    ''')
    @classmethod
    def execute(cls, client: Client, variable_values: _GetObjectInput) -> GetObjectResponse:
        return client.execute(  # type: ignore
            cls._query, variable_values=variable_values
        )
    @classmethod
    def execute_async(cls, client: Client, variable_values: _GetObjectInput) -> typing.Awaitable[GetObjectResponse]:
        return client.execute_async(  # type: ignore
            cls._query, variable_values=variable_values
        )


GetInterface__hero = typing.TypedDict("GetInterface__hero", {"id": str, "name": str})


GetInterfaceResponse = typing.TypedDict("GetInterfaceResponse", {"hero": GetInterface__hero})


_GetInterfaceInput__required = typing.TypedDict("_GetInterfaceInput__required", {"e": Episode})
_GetInterfaceInput__not_required = typing.TypedDict("_GetInterfaceInput__not_required", {}, total=False)


class _GetInterfaceInput(_GetInterfaceInput__required, _GetInterfaceInput__not_required):
    pass


class GetInterface:
    _query = gql('''
        query GetInterface($e: Episode!) {
          hero(episode: $e) {
            id name
          }
        }
    ''')
    @classmethod
    def execute(cls, client: Client, variable_values: _GetInterfaceInput) -> GetInterfaceResponse:
        return client.execute(  # type: ignore
            cls._query, variable_values=variable_values
        )
    @classmethod
    def execute_async(cls, client: Client, variable_values: _GetInterfaceInput) -> typing.Awaitable[GetInterfaceResponse]:
        return client.execute_async(  # type: ignore
            cls._query, variable_values=variable_values
        )


GetInlineFragment__hero__Droid = typing.TypedDict("GetInlineFragment__hero__Droid", {"__typename": typing.Literal["Droid"], "id": str, "name": str, "primaryFunction": str})


GetInlineFragment__hero__Human = typing.TypedDict("GetInlineFragment__hero__Human", {"__typename": typing.Literal["Human"], "id": str, "name": str, "totalCredits": int})


__GetInlineFragment__hero = typing.TypedDict("__GetInlineFragment__hero", {"__typename": typing.Literal["Character"], "id": str, "name": str})
GetInlineFragment__hero = typing.Union[__GetInlineFragment__hero, GetInlineFragment__hero__Human, GetInlineFragment__hero__Droid]


GetInlineFragmentResponse = typing.TypedDict("GetInlineFragmentResponse", {"hero": GetInlineFragment__hero})


_GetInlineFragmentInput__required = typing.TypedDict("_GetInlineFragmentInput__required", {"e": Episode})
_GetInlineFragmentInput__not_required = typing.TypedDict("_GetInlineFragmentInput__not_required", {}, total=False)


class _GetInlineFragmentInput(_GetInlineFragmentInput__required, _GetInlineFragmentInput__not_required):
    pass


class GetInlineFragment:
    _query = gql('''
        query GetInlineFragment($e: Episode!) {
          hero(episode: $e) {
            __typename id name
            ... on Human { totalCredits }
            ... on Droid { primaryFunction }
          }
        }
    ''')
    @classmethod
    def execute(cls, client: Client, variable_values: _GetInlineFragmentInput) -> GetInlineFragmentResponse:
        return client.execute(  # type: ignore
            cls._query, variable_values=variable_values
        )
    @classmethod
    def execute_async(cls, client: Client, variable_values: _GetInlineFragmentInput) -> typing.Awaitable[GetInlineFragmentResponse]:
        return client.execute_async(  # type: ignore
            cls._query, variable_values=variable_values
        )


GetCustomScalarResponse = typing.TypedDict("GetCustomScalarResponse", {"today": datetime.date})


_GetCustomScalarInput__required = typing.TypedDict("_GetCustomScalarInput__required", {})
_GetCustomScalarInput__not_required = typing.TypedDict("_GetCustomScalarInput__not_required", {}, total=False)


class _GetCustomScalarInput(_GetCustomScalarInput__required, _GetCustomScalarInput__not_required):
    pass


class GetCustomScalar:
    _query = gql('''
        query GetCustomScalar {
          today
        }
    ''')
    @classmethod
    def execute(cls, client: Client, variable_values: _GetCustomScalarInput = {}) -> GetCustomScalarResponse:
        return client.execute(  # type: ignore
            cls._query, variable_values=variable_values
        )
    @classmethod
    def execute_async(cls, client: Client, variable_values: _GetCustomScalarInput = {}) -> typing.Awaitable[GetCustomScalarResponse]:
        return client.execute_async(  # type: ignore
            cls._query, variable_values=variable_values
        )


GetUnion__search__Starship = typing.TypedDict("GetUnion__search__Starship", {"__typename": typing.Literal["Starship"], "name": str})


GetUnion__search__Droid__friends = typing.TypedDict("GetUnion__search__Droid__friends", {"name": str})


GetUnion__search__Droid = typing.TypedDict("GetUnion__search__Droid", {"__typename": typing.Literal["Droid"], "friends": typing.List[typing.Optional[GetUnion__search__Droid__friends]]})


GetUnion__search__Human = typing.TypedDict("GetUnion__search__Human", {"__typename": typing.Literal["Human"], "totalCredits": int})


__GetUnion__search = typing.TypedDict("__GetUnion__search", {"__typename": typing.Literal["SearchResult"]})
GetUnion__search = typing.Union[__GetUnion__search, GetUnion__search__Human, GetUnion__search__Droid, GetUnion__search__Starship]


GetUnionResponse = typing.TypedDict("GetUnionResponse", {"search": typing.List[GetUnion__search]})


_GetUnionInput__required = typing.TypedDict("_GetUnionInput__required", {"text": str})
_GetUnionInput__not_required = typing.TypedDict("_GetUnionInput__not_required", {}, total=False)


class _GetUnionInput(_GetUnionInput__required, _GetUnionInput__not_required):
    pass


class GetUnion:
    _query = gql('''
        query GetUnion($text: String!) {
          search(text: $text) {
            __typename
            ... on Human { totalCredits }
            ... on Droid { friends { name } }
            ... on Starship { name }
          }
        }
    ''')
    @classmethod
    def execute(cls, client: Client, variable_values: _GetUnionInput) -> GetUnionResponse:
        return client.execute(  # type: ignore
            cls._query, variable_values=variable_values
        )
    @classmethod
    def execute_async(cls, client: Client, variable_values: _GetUnionInput) -> typing.Awaitable[GetUnionResponse]:
        return client.execute_async(  # type: ignore
            cls._query, variable_values=variable_values
        )


GetRecursive__hero__Droid__friends__Droid__friends = typing.TypedDict("GetRecursive__hero__Droid__friends__Droid__friends", {"name": str})


GetRecursive__hero__Droid__friends__Droid = typing.TypedDict("GetRecursive__hero__Droid__friends__Droid", {"__typename": typing.Literal["Droid"], "id": str, "name": str, "friends": typing.List[typing.Optional[GetRecursive__hero__Droid__friends__Droid__friends]]})


GetRecursive__hero__Droid__friends__Human__starships = typing.TypedDict("GetRecursive__hero__Droid__friends__Human__starships", {"name": str})


GetRecursive__hero__Droid__friends__Human = typing.TypedDict("GetRecursive__hero__Droid__friends__Human", {"__typename": typing.Literal["Human"], "id": str, "name": str, "starships": typing.List[typing.Optional[GetRecursive__hero__Droid__friends__Human__starships]]})


__GetRecursive__hero__Droid__friends = typing.TypedDict("__GetRecursive__hero__Droid__friends", {"__typename": typing.Literal["Character"], "id": str})
GetRecursive__hero__Droid__friends = typing.Union[__GetRecursive__hero__Droid__friends, GetRecursive__hero__Droid__friends__Human, GetRecursive__hero__Droid__friends__Droid]


GetRecursive__hero__Droid = typing.TypedDict("GetRecursive__hero__Droid", {"__typename": typing.Literal["Droid"], "name": str, "primaryFunction": str, "friends": typing.List[typing.Optional[GetRecursive__hero__Droid__friends]]})


GetRecursive__hero__Human__friends__Droid = typing.TypedDict("GetRecursive__hero__Human__friends__Droid", {"__typename": typing.Literal["Droid"], "id": str, "name": str})


GetRecursive__hero__Human__friends__Human = typing.TypedDict("GetRecursive__hero__Human__friends__Human", {"__typename": typing.Literal["Human"], "name": str})


__GetRecursive__hero__Human__friends = typing.TypedDict("__GetRecursive__hero__Human__friends", {"__typename": typing.Literal["Character"]})
GetRecursive__hero__Human__friends = typing.Union[__GetRecursive__hero__Human__friends, GetRecursive__hero__Human__friends__Human, GetRecursive__hero__Human__friends__Droid]


GetRecursive__hero__Human = typing.TypedDict("GetRecursive__hero__Human", {"__typename": typing.Literal["Human"], "name": str, "friends": typing.List[typing.Optional[GetRecursive__hero__Human__friends]]})


__GetRecursive__hero = typing.TypedDict("__GetRecursive__hero", {"__typename": typing.Literal["Character"], "name": str})
GetRecursive__hero = typing.Union[__GetRecursive__hero, GetRecursive__hero__Human, GetRecursive__hero__Droid]


GetRecursiveResponse = typing.TypedDict("GetRecursiveResponse", {"hero": GetRecursive__hero})


_GetRecursiveInput__required = typing.TypedDict("_GetRecursiveInput__required", {"episode": Episode})
_GetRecursiveInput__not_required = typing.TypedDict("_GetRecursiveInput__not_required", {}, total=False)


class _GetRecursiveInput(_GetRecursiveInput__required, _GetRecursiveInput__not_required):
    pass


class GetRecursive:
    _query = gql('''
        query GetRecursive($episode: Episode!) {
          hero(episode: $episode) {
            __typename
            name
            ... on Human {
              friends {
                __typename
                ... on Human { name }
                ... on Droid { id name }
              }
            }
            ... on Droid {
              primaryFunction
              friends {
                __typename
                id
                ... on Human {
                  name
                  starships { name }
                }
                ... on Droid {
                  name
                  friends { name }
                }
              }
            }
          }
        }
    ''')
    @classmethod
    def execute(cls, client: Client, variable_values: _GetRecursiveInput) -> GetRecursiveResponse:
        return client.execute(  # type: ignore
            cls._query, variable_values=variable_values
        )
    @classmethod
    def execute_async(cls, client: Client, variable_values: _GetRecursiveInput) -> typing.Awaitable[GetRecursiveResponse]:
        return client.execute_async(  # type: ignore
            cls._query, variable_values=variable_values
        )


AddStarshipInput__required = typing.TypedDict("AddStarshipInput__required", {"name": str})
AddStarshipInput__not_required = typing.TypedDict("AddStarshipInput__not_required", {}, total=False)


class AddStarshipInput(AddStarshipInput__required, AddStarshipInput__not_required):
    pass


AddStarship__addStarship = typing.TypedDict("AddStarship__addStarship", {"id": str, "name": str})


AddStarshipResponse = typing.TypedDict("AddStarshipResponse", {"addStarship": AddStarship__addStarship})


_AddStarshipInput__required = typing.TypedDict("_AddStarshipInput__required", {"input": AddStarshipInput})
_AddStarshipInput__not_required = typing.TypedDict("_AddStarshipInput__not_required", {}, total=False)


class _AddStarshipInput(_AddStarshipInput__required, _AddStarshipInput__not_required):
    pass


class AddStarship:
    _query = gql('''
        mutation AddStarship($input: AddStarshipInput!) {
          addStarship(input: $input) {
            id name
          }
        }
    ''')
    @classmethod
    def execute(cls, client: Client, variable_values: _AddStarshipInput) -> AddStarshipResponse:
        return client.execute(  # type: ignore
            cls._query, variable_values=variable_values
        )
    @classmethod
    def execute_async(cls, client: Client, variable_values: _AddStarshipInput) -> typing.Awaitable[AddStarshipResponse]:
        return client.execute_async(  # type: ignore
            cls._query, variable_values=variable_values
        )


AllHuman__allHuman = typing.TypedDict("AllHuman__allHuman", {"id": str, "name": str})


AllHumanResponse = typing.TypedDict("AllHumanResponse", {"allHuman": AllHuman__allHuman})


_AllHumanInput__required = typing.TypedDict("_AllHumanInput__required", {})
_AllHumanInput__not_required = typing.TypedDict("_AllHumanInput__not_required", {}, total=False)


class _AllHumanInput(_AllHumanInput__required, _AllHumanInput__not_required):
    pass


class AllHuman:
    _query = gql('''
        subscription AllHuman {
          allHuman {
            id name
          }
        }
    ''')
    @classmethod
    def subscribe(cls, client: Client, variable_values: _AllHumanInput = {}) -> typing.Iterable[AllHumanResponse]:
        for r in client.subscribe(cls._query, variable_values=variable_values):
            yield r  # type: ignore
    @classmethod
    async def subscribe_async(cls, client: Client, variable_values: _AllHumanInput = {}) -> typing.AsyncIterable[AllHumanResponse]:
        async for r in client.subscribe_async(cls._query, variable_values=variable_values):
            yield r  # type: ignore
